{
	"info": {
		"_postman_id": "679331b7-7ecf-4ad9-9e4f-4e32c05c5172",
		"name": "Workflow API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Deploy DAG",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"filename\": \"\",\n    \"dag\": {\n        \"description\": \"\",\n        \"name\": \"\",\n        \"parameters\": [\n            {\n                \"description\": \"The id of the DAG\",\n                \"id\": \"dag_id\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"id\"\n            },\n            {\n                \"default\": \"\",\n                \"description\": \"The description for the DAG to e.g. be shown on the webserver\",\n                \"id\": \"description\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\"\n            },\n            {\n                \"default\": \"0 * * * *\",\n                \"description\": \"Defines how often that DAG runs, this timedelta object gets added to your latest task instance's execution_date to figure out the next schedule\",\n                \"id\": \"schedule_interval\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"0 * * * *\"\n            },\n            {\n                \"default\": \"datetime(2020,11,1)\",\n                \"description\": \"The timestamp from which the scheduler will attempt to backfill\",\n                \"id\": \"start_date\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"datetime.datetime\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"A date beyond which your DAG won't run, leave to None for open ended scheduling\",\n                \"id\": \"end_date\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"datetime.datetime\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"This list of folders (non relative) defines where jinja will look for your templates. Order matters. Note that jinja/airflow includes the path of your DAG file by default\",\n                \"id\": \"template_searchpath\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\"\n            },\n            {\n                \"default\": \"\",\n                \"description\": \"Template undefined type.\",\n                \"id\": \"template_undefined\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"a dictionary of macros that will be exposed in your jinja templates. For example, passing ``dict(foo='bar')`` to this argument allows you to ``{{ foo }}`` in all jinja templates related to this DAG. Note that you can pass any type of object here.\",\n                \"id\": \"user_defined_macros\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"a dictionary of filters that will be exposed in your jinja templates. For example, passing ``dict(hello=lambda name: 'Hello %s' % name)`` to this argument allows you to ``{{ 'world' | hello }}`` in all jinja templates related to this DAG.\",\n                \"id\": \"user_defined_filters\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"A dictionary of default parameters to be used as constructor keyword parameters when initialising operators. Note that operators have the same hook, and precede those defined here, meaning that if your dict contains `'depends_on_past': True` here and `'depends_on_past': False` in the operator's call `default_args`, the actual value will be `False`.\",\n                \"id\": \"default_args\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"a dictionary of DAG level parameters that are made accessible in templates, namespaced under `params`. These params can be overridden at the task level.\",\n                \"id\": \"params\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": \"16\",\n                \"description\": \"the number of task instances allowed to run concurrently\",\n                \"id\": \"concurrency\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"int\",\n                \"value\": \"16\"\n            },\n            {\n                \"default\": \"16\",\n                \"description\": \"maximum number of active DAG runs, beyond this number of DAG runs in a running state, the scheduler won't create new active DAG runs\",\n                \"id\": \"max_active_runs\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"int\",\n                \"value\": \"16\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"specify how long a DagRun should be up before timing out / failing, so that new DagRuns can be created. The timeout is only enforced for scheduled DagRuns, and only once the # of active DagRuns == max_active_runs.\",\n                \"id\": \"dagrun_timeout\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"datetime.timedelta\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"specify a function to call when reporting SLA timeouts.\",\n                \"id\": \"sla_miss_callback\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"Specify DAG default view (tree, graph, duration, gantt, landing_times)\",\n                \"id\": \"default_view\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\"\n            },\n            {\n                \"default\": \"LR\",\n                \"description\": \"Specify DAG orientation in graph view (LR, TB, RL, BT)\",\n                \"id\": \"orientation\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"LR\"\n            },\n            {\n                \"default\": \"True\",\n                \"description\": \"Perform scheduler catchup (or only run latest)? Defaults to True\",\n                \"id\": \"catchup\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"bool\",\n                \"value\": \"True\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"A function to be called when a DagRun of this dag fails. A context dictionary is passed as a single parameter to this function.\",\n                \"id\": \"on_failure_callback\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"callable\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"Much like the ``on_failure_callback`` except that it is executed when the dag succeeds.\",\n                \"id\": \"on_success_callback\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"callable\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"Specify optional DAG-level permissions, e.g., \\\"{\\n                            \\\"role1\\\":{\\n                               \\\"can_dag_read\\\"\\n                            },\\n                            \\\"role2\\\":{\\n                               \\\"can_dag_read\\\",\\n                               \\\"can_dag_edit\\\"\\n                            }\\n                         }\\\"\",\n                \"id\": \"access_control\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"Specifies if the dag is paused when created for the first time. If the dag exists already, this flag will be ignored. If this optional parameter is not specified, the global config setting will be used.\",\n                \"id\": \"is_paused_upon_creation\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    \"nodes\": {\n        \"9976392c-3e99-4e01-aed5-cfa036a11dce\": {\n            \"type\": \"DummyOperator\",\n            \"properties\": {\n                \"description\": \"Operator that does literally nothing. It can be used to group tasks in a\\nDAG.\",\n                \"module\": \"airflow.operators.dummy_operator\",\n                \"parameters\": [\n                    {\n                        \"description\": \"a unique, meaningful id for the task\",\n                        \"id\": \"task_id\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": true,\n                        \"type\": \"str\",\n                        \"value\": \"dummy\"\n                    },\n                    {\n                        \"default\": \"airflow\",\n                        \"description\": \"the owner of the task, using the unix username is recommended\",\n                        \"id\": \"owner\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"airflow\"\n                    },\n                    {\n                        \"default\": \"0\",\n                        \"description\": \"the number of retries that should be performed before\\nfailing the task\",\n                        \"id\": \"retries\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"int\",\n                        \"value\": \"0\"\n                    },\n                    {\n                        \"default\": \"0:05:00\",\n                        \"description\": \"delay between retries\",\n                        \"id\": \"retry_delay\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.timedelta\",\n                        \"value\": \"0\"\n                    },\n                    {\n                        \"default\": \"False\",\n                        \"description\": \"allow progressive longer waits between\\nretries by using exponential backoff algorithm on retry delay (delay\\nwill be converted into seconds)\",\n                        \"id\": \"retry_exponential_backoff\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"maximum delay interval between retries\",\n                        \"id\": \"max_retry_delay\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.timedelta\",\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"The ``start_date`` for the task, determines\\nthe ``execution_date`` for the first task instance. The best practice\\nis to have the start_date rounded\\nto your DAG's ``schedule_interval``. Daily jobs have their start_date\\nsome day at 00:00:00, hourly jobs have their start_date at 00:00\\nof a specific hour. Note that Airflow simply looks at the latest\\n``execution_date`` and adds the ``schedule_interval`` to determine\\nthe next ``execution_date``. It is also very important\\nto note that different tasks' dependencies\\nneed to line up in time. If task A depends on task B and their\\nstart_date are offset in a way that their execution_date don't line\\nup, A's dependencies will never be met. If you are looking to delay\\na task, for example running a daily task at 2AM, look into the\\n``TimeSensor`` and ``TimeDeltaSensor``. We advise against using\\ndynamic ``start_date`` and recommend using fixed ones. Read the\\nFAQ entry about start_date for more information.\",\n                        \"id\": \"start_date\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.datetime\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"if specified, the scheduler won't go beyond this date\",\n                        \"id\": \"end_date\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.datetime\"\n                    },\n                    {\n                        \"default\": \"False\",\n                        \"description\": \"when set to true, task instances will run\\nsequentially while relying on the previous task's schedule to\\nsucceed. The task instance for the start_date is allowed to run.\",\n                        \"id\": \"depends_on_past\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"default\": \"False\",\n                        \"description\": \"when set to true, an instance of task\\nX will wait for tasks immediately downstream of the previous instance\\nof task X to finish successfully before it runs. This is useful if the\\ndifferent instances of a task X alter the same asset, and this asset\\nis used by tasks downstream of task X. Note that depends_on_past\\nis forced to True wherever wait_for_downstream is used.\",\n                        \"id\": \"wait_for_downstream\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"default\": \"default\",\n                        \"description\": \"which queue to target when running this job. Not\\nall executors implement queue management, the CeleryExecutor\\ndoes support targeting specific queues.\",\n                        \"id\": \"queue\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"default\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"a reference to the dag the task is attached to (if any)\",\n                        \"id\": \"dag\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"default\": \"1\",\n                        \"description\": \"priority weight of this task against other task.\\nThis allows the executor to trigger higher priority tasks before\\nothers when things get backed up. Set priority_weight as a higher\\nnumber for more important tasks.\",\n                        \"id\": \"priority_weight\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"int\",\n                        \"value\": \"1\"\n                    },\n                    {\n                        \"default\": \"downstream\",\n                        \"description\": \"weighting method used for the effective total\\npriority weight of the task. Options are:\\n``{ downstream | upstream | absolute }`` default is ``downstream``\\nWhen set to ``downstream`` the effective weight of the task is the\\naggregate sum of all downstream descendants. As a result, upstream\\ntasks will have higher weight and will be scheduled more aggressively\\nwhen using positive weight values. This is useful when you have\\nmultiple dag run instances and desire to have all upstream tasks to\\ncomplete for all runs before each dag can continue processing\\ndownstream tasks. When set to ``upstream`` the effective weight is the\\naggregate sum of all upstream ancestors. This is the opposite where\\ndowntream tasks have higher weight and will be scheduled more\\naggressively when using positive weight values. This is useful when you\\nhave multiple dag run instances and prefer to have each dag complete\\nbefore starting upstream tasks of other dags.  When set to\\n``absolute``, the effective weight is the exact ``priority_weight``\\nspecified without additional weighting. You may want to do this when\\nyou know exactly what priority weight each task should have.\\nAdditionally, when set to ``absolute``, there is bonus effect of\\nsignificantly speeding up the task creation process as for very large\\nDAGS. Options can be set as string or using the constants defined in\\nthe static class ``airflow.utils.WeightRule``\",\n                        \"id\": \"weight_rule\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"downstream\"\n                    },\n                    {\n                        \"default\": \"default_pool\",\n                        \"description\": \"the slot pool this task should run in, slot pools are a\\nway to limit concurrency for certain tasks\",\n                        \"id\": \"pool\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"default_pool\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"time by which the job is expected to succeed. Note that\\nthis represents the ``timedelta`` after the period is closed. For\\nexample if you set an SLA of 1 hour, the scheduler would send an email\\nsoon after 1:00AM on the ``2016-01-02`` if the ``2016-01-01`` instance\\nhas not succeeded yet.\\nThe scheduler pays special attention for jobs with an SLA and\\nsends alert\\nemails for sla misses. SLA misses are also recorded in the database\\nfor future reference. All tasks that share the same SLA time\\nget bundled in a single email, sent soon after that time. SLA\\nnotification are sent once and only once for each task instance.\",\n                        \"id\": \"sla\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.timedelta\",\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"max time allowed for the execution of\\nthis task instance, if it goes beyond it will raise and fail.\",\n                        \"id\": \"execution_timeout\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.timedelta\",\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"a function to be called when a task instance\\nof this task fails. a context dictionary is passed as a single\\nparameter to this function. Context contains references to related\\nobjects to the task instance and is documented under the macros\\nsection of the API.\",\n                        \"id\": \"on_failure_callback\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"callable\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except\\nthat it is executed when retries occur.\",\n                        \"id\": \"on_retry_callback\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"callable\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except\\nthat it is executed when the task succeeds.\",\n                        \"id\": \"on_success_callback\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"callable\"\n                    },\n                    {\n                        \"default\": \"all_success\",\n                        \"description\": \"defines the rule by which dependencies are applied\\nfor the task to get triggered. Options are:\\n``{ all_success | all_failed | all_done | one_success |\\none_failed | none_failed | none_skipped | dummy}``\\ndefault is ``all_success``. Options can be set as string or\\nusing the constants defined in the static class\\n``airflow.utils.TriggerRule``\",\n                        \"id\": \"trigger_rule\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"all_success\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"A map of resource parameter names (the argument names of the\\nResources constructor) to their values.\",\n                        \"id\": \"resources\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"dict\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"unix username to impersonate while running the task\",\n                        \"id\": \"run_as_user\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"When set, a task will be able to limit the concurrent\\nruns across execution_dates\",\n                        \"id\": \"task_concurrency\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"int\",\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"Additional task-level configuration parameters that are\\ninterpreted by a specific executor. Parameters are namespaced by the name of\\nexecutor.\\n\\n**Example**: to run this task in a specific docker container through\\nthe KubernetesExecutor ::\\n\\n    MyOperator(...,\\n        executor_config={\\n        \\\"KubernetesExecutor\\\":\\n            {\\\"image\\\": \\\"myCustomDockerImage\\\"}\\n            }\\n    )\",\n                        \"id\": \"executor_config\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"dict\"\n                    },\n                    {\n                        \"default\": \"True\",\n                        \"description\": \"if True, an XCom is pushed containing the Operator's\\nresult\",\n                        \"id\": \"do_xcom_push\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"True\"\n                    }\n                ],\n                \"name\": \"\"\n            },\n            \"id\": \"9976392c-3e99-4e01-aed5-cfa036a11dce\",\n            \"loc\": \"-459.5 -209.6875\"\n        },\n        \"03d8ec98-d361-4896-8e1e-328d7a5fcc1e\": {\n            \"type\": \"BashOperator\",\n            \"properties\": {\n                \"description\": \"Execute a Bash script, command or set of commands.\\n.. seealso::\\n    For more information on how to use this operator, take a look at the guide:\\n    :ref:`howto/operator:BashOperator`\",\n                \"module\": \"airflow.operators.bash_operator\",\n                \"parameters\": [\n                    {\n                        \"description\": \"The command, set of commands or reference to a\\nbash script (must be '.sh') to be executed. (templated)\",\n                        \"id\": \"bash_command\",\n                        \"inheritedFrom\": null,\n                        \"required\": true,\n                        \"type\": \"str\",\n                        \"value\": \"echo hi!\"\n                    },\n                    {\n                        \"default\": \"False\",\n                        \"description\": \"If xcom_push is True, the last line written to stdout\\nwill also be pushed to an XCom when the bash command completes.\",\n                        \"id\": \"xcom_push\",\n                        \"inheritedFrom\": null,\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"If env is not None, it must be a mapping that defines the\\nenvironment variables for the new process; these are used instead\\nof inheriting the current process environment, which is the default\\nbehavior. (templated)\",\n                        \"id\": \"env\",\n                        \"inheritedFrom\": null,\n                        \"required\": false,\n                        \"type\": \"dict\"\n                    },\n                    {\n                        \"default\": \"utf-8\",\n                        \"description\": \"Output encoding of bash command\",\n                        \"id\": \"output_encoding\",\n                        \"inheritedFrom\": null,\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"utf-8\"\n                    },\n                    {\n                        \"description\": \"a unique, meaningful id for the task\",\n                        \"id\": \"task_id\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": true,\n                        \"type\": \"str\",\n                        \"value\": \"bash\"\n                    },\n                    {\n                        \"default\": \"airflow\",\n                        \"description\": \"the owner of the task, using the unix username is recommended\",\n                        \"id\": \"owner\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"airflow\"\n                    },\n                    {\n                        \"default\": \"0\",\n                        \"description\": \"the number of retries that should be performed before\\nfailing the task\",\n                        \"id\": \"retries\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"int\",\n                        \"value\": \"0\"\n                    },\n                    {\n                        \"default\": \"0:05:00\",\n                        \"description\": \"delay between retries\",\n                        \"id\": \"retry_delay\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.timedelta\",\n                        \"value\": \"0\"\n                    },\n                    {\n                        \"default\": \"False\",\n                        \"description\": \"allow progressive longer waits between\\nretries by using exponential backoff algorithm on retry delay (delay\\nwill be converted into seconds)\",\n                        \"id\": \"retry_exponential_backoff\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"maximum delay interval between retries\",\n                        \"id\": \"max_retry_delay\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.timedelta\",\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"The ``start_date`` for the task, determines\\nthe ``execution_date`` for the first task instance. The best practice\\nis to have the start_date rounded\\nto your DAG's ``schedule_interval``. Daily jobs have their start_date\\nsome day at 00:00:00, hourly jobs have their start_date at 00:00\\nof a specific hour. Note that Airflow simply looks at the latest\\n``execution_date`` and adds the ``schedule_interval`` to determine\\nthe next ``execution_date``. It is also very important\\nto note that different tasks' dependencies\\nneed to line up in time. If task A depends on task B and their\\nstart_date are offset in a way that their execution_date don't line\\nup, A's dependencies will never be met. If you are looking to delay\\na task, for example running a daily task at 2AM, look into the\\n``TimeSensor`` and ``TimeDeltaSensor``. We advise against using\\ndynamic ``start_date`` and recommend using fixed ones. Read the\\nFAQ entry about start_date for more information.\",\n                        \"id\": \"start_date\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.datetime\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"if specified, the scheduler won't go beyond this date\",\n                        \"id\": \"end_date\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.datetime\"\n                    },\n                    {\n                        \"default\": \"False\",\n                        \"description\": \"when set to true, task instances will run\\nsequentially while relying on the previous task's schedule to\\nsucceed. The task instance for the start_date is allowed to run.\",\n                        \"id\": \"depends_on_past\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"default\": \"False\",\n                        \"description\": \"when set to true, an instance of task\\nX will wait for tasks immediately downstream of the previous instance\\nof task X to finish successfully before it runs. This is useful if the\\ndifferent instances of a task X alter the same asset, and this asset\\nis used by tasks downstream of task X. Note that depends_on_past\\nis forced to True wherever wait_for_downstream is used.\",\n                        \"id\": \"wait_for_downstream\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"default\": \"default\",\n                        \"description\": \"which queue to target when running this job. Not\\nall executors implement queue management, the CeleryExecutor\\ndoes support targeting specific queues.\",\n                        \"id\": \"queue\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"default\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"a reference to the dag the task is attached to (if any)\",\n                        \"id\": \"dag\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"default\": \"1\",\n                        \"description\": \"priority weight of this task against other task.\\nThis allows the executor to trigger higher priority tasks before\\nothers when things get backed up. Set priority_weight as a higher\\nnumber for more important tasks.\",\n                        \"id\": \"priority_weight\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"int\",\n                        \"value\": \"1\"\n                    },\n                    {\n                        \"default\": \"downstream\",\n                        \"description\": \"weighting method used for the effective total\\npriority weight of the task. Options are:\\n``{ downstream | upstream | absolute }`` default is ``downstream``\\nWhen set to ``downstream`` the effective weight of the task is the\\naggregate sum of all downstream descendants. As a result, upstream\\ntasks will have higher weight and will be scheduled more aggressively\\nwhen using positive weight values. This is useful when you have\\nmultiple dag run instances and desire to have all upstream tasks to\\ncomplete for all runs before each dag can continue processing\\ndownstream tasks. When set to ``upstream`` the effective weight is the\\naggregate sum of all upstream ancestors. This is the opposite where\\ndowntream tasks have higher weight and will be scheduled more\\naggressively when using positive weight values. This is useful when you\\nhave multiple dag run instances and prefer to have each dag complete\\nbefore starting upstream tasks of other dags.  When set to\\n``absolute``, the effective weight is the exact ``priority_weight``\\nspecified without additional weighting. You may want to do this when\\nyou know exactly what priority weight each task should have.\\nAdditionally, when set to ``absolute``, there is bonus effect of\\nsignificantly speeding up the task creation process as for very large\\nDAGS. Options can be set as string or using the constants defined in\\nthe static class ``airflow.utils.WeightRule``\",\n                        \"id\": \"weight_rule\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"downstream\"\n                    },\n                    {\n                        \"default\": \"default_pool\",\n                        \"description\": \"the slot pool this task should run in, slot pools are a\\nway to limit concurrency for certain tasks\",\n                        \"id\": \"pool\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"default_pool\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"time by which the job is expected to succeed. Note that\\nthis represents the ``timedelta`` after the period is closed. For\\nexample if you set an SLA of 1 hour, the scheduler would send an email\\nsoon after 1:00AM on the ``2016-01-02`` if the ``2016-01-01`` instance\\nhas not succeeded yet.\\nThe scheduler pays special attention for jobs with an SLA and\\nsends alert\\nemails for sla misses. SLA misses are also recorded in the database\\nfor future reference. All tasks that share the same SLA time\\nget bundled in a single email, sent soon after that time. SLA\\nnotification are sent once and only once for each task instance.\",\n                        \"id\": \"sla\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.timedelta\",\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"max time allowed for the execution of\\nthis task instance, if it goes beyond it will raise and fail.\",\n                        \"id\": \"execution_timeout\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"datetime.timedelta\",\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"a function to be called when a task instance\\nof this task fails. a context dictionary is passed as a single\\nparameter to this function. Context contains references to related\\nobjects to the task instance and is documented under the macros\\nsection of the API.\",\n                        \"id\": \"on_failure_callback\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"callable\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except\\nthat it is executed when retries occur.\",\n                        \"id\": \"on_retry_callback\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"callable\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except\\nthat it is executed when the task succeeds.\",\n                        \"id\": \"on_success_callback\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"callable\"\n                    },\n                    {\n                        \"default\": \"all_success\",\n                        \"description\": \"defines the rule by which dependencies are applied\\nfor the task to get triggered. Options are:\\n``{ all_success | all_failed | all_done | one_success |\\none_failed | none_failed | none_skipped | dummy}``\\ndefault is ``all_success``. Options can be set as string or\\nusing the constants defined in the static class\\n``airflow.utils.TriggerRule``\",\n                        \"id\": \"trigger_rule\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\",\n                        \"value\": \"all_success\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"A map of resource parameter names (the argument names of the\\nResources constructor) to their values.\",\n                        \"id\": \"resources\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"dict\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"unix username to impersonate while running the task\",\n                        \"id\": \"run_as_user\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"When set, a task will be able to limit the concurrent\\nruns across execution_dates\",\n                        \"id\": \"task_concurrency\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"int\",\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"default\": null,\n                        \"description\": \"Additional task-level configuration parameters that are\\ninterpreted by a specific executor. Parameters are namespaced by the name of\\nexecutor.\\n\\n**Example**: to run this task in a specific docker container through\\nthe KubernetesExecutor ::\\n\\n    MyOperator(...,\\n        executor_config={\\n        \\\"KubernetesExecutor\\\":\\n            {\\\"image\\\": \\\"myCustomDockerImage\\\"}\\n            }\\n    )\",\n                        \"id\": \"executor_config\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"dict\"\n                    },\n                    {\n                        \"default\": \"True\",\n                        \"description\": \"if True, an XCom is pushed containing the Operator's\\nresult\",\n                        \"id\": \"do_xcom_push\",\n                        \"inheritedFrom\": \"BaseOperator\",\n                        \"required\": false,\n                        \"type\": \"bool\",\n                        \"value\": \"True\"\n                    }\n                ],\n                \"name\": \"\"\n            },\n            \"id\": \"03d8ec98-d361-4896-8e1e-328d7a5fcc1e\",\n            \"loc\": \"-357.5 -17.6875\"\n        }\n    },\n    \"links\": {\n        \"6130e6c7-a145-42c9-8b3e-f48327efbd14\": {\n            \"from\": \"9976392c-3e99-4e01-aed5-cfa036a11dce\",\n            \"to\": \"03d8ec98-d361-4896-8e1e-328d7a5fcc1e\",\n            \"fromPort\": \"Right\",\n            \"toPort\": \"Left\",\n            \"id\": \"6130e6c7-a145-42c9-8b3e-f48327efbd14\"\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8099/dags",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8099",
					"path": [
						"dags"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deploy DAG NEW",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"filename\": \"\",\n    \"dag\": {\n        \"description\": \"\",\n        \"name\": \"\",\n        \"parameters\": [\n            {\n                \"description\": \"The id of the DAG\",\n                \"id\": \"dag_id\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"workflow_02\"\n            },\n            {\n                \"default\": \"\",\n                \"description\": \"The description for the DAG to e.g. be shown on the webserver\",\n                \"id\": \"description\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"\"\n            },\n            {\n                \"default\": \"0 * * * *\",\n                \"description\": \"Defines how often that DAG runs, this timedelta object gets added to your latest task instance's execution_date to figure out the next schedule\",\n                \"id\": \"schedule_interval\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"0 * * * *\"\n            },\n            {\n                \"default\": \"datetime(2020,11,1)\",\n                \"description\": \"The timestamp from which the scheduler will attempt to backfill\",\n                \"id\": \"start_date\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"datetime.datetime\",\n                \"value\": {\n                    \"class\": \"Date\",\n                    \"value\": \"2021-01-01T03:00:00.000Z\"\n                }\n            },\n            {\n                \"default\": null,\n                \"description\": \"A date beyond which your DAG won't run, leave to None for open ended scheduling\",\n                \"id\": \"end_date\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"datetime.datetime\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"This list of folders (non relative) defines where jinja will look for your templates. Order matters. Note that jinja/airflow includes the path of your DAG file by default\",\n                \"id\": \"template_searchpath\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\"\n            },\n            {\n                \"default\": \"\",\n                \"description\": \"Template undefined type.\",\n                \"id\": \"template_undefined\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"a dictionary of macros that will be exposed in your jinja templates. For example, passing ``dict(foo='bar')`` to this argument allows you to ``{{ foo }}`` in all jinja templates related to this DAG. Note that you can pass any type of object here.\",\n                \"id\": \"user_defined_macros\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"a dictionary of filters that will be exposed in your jinja templates. For example, passing ``dict(hello=lambda name: 'Hello %s' % name)`` to this argument allows you to ``{{ 'world' | hello }}`` in all jinja templates related to this DAG.\",\n                \"id\": \"user_defined_filters\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"A dictionary of default parameters to be used as constructor keyword parameters when initialising operators. Note that operators have the same hook, and precede those defined here, meaning that if your dict contains `'depends_on_past': True` here and `'depends_on_past': False` in the operator's call `default_args`, the actual value will be `False`.\",\n                \"id\": \"default_args\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"a dictionary of DAG level parameters that are made accessible in templates, namespaced under `params`. These params can be overridden at the task level.\",\n                \"id\": \"params\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": \"16\",\n                \"description\": \"the number of task instances allowed to run concurrently\",\n                \"id\": \"concurrency\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"int\",\n                \"value\": \"16\"\n            },\n            {\n                \"default\": \"16\",\n                \"description\": \"maximum number of active DAG runs, beyond this number of DAG runs in a running state, the scheduler won't create new active DAG runs\",\n                \"id\": \"max_active_runs\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"int\",\n                \"value\": \"16\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"specify how long a DagRun should be up before timing out / failing, so that new DagRuns can be created. The timeout is only enforced for scheduled DagRuns, and only once the # of active DagRuns == max_active_runs.\",\n                \"id\": \"dagrun_timeout\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"datetime.timedelta\",\n                \"value\": \"null\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"specify a function to call when reporting SLA timeouts.\",\n                \"id\": \"sla_miss_callback\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"Specify DAG default view (tree, graph, duration, gantt, landing_times)\",\n                \"id\": \"default_view\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\"\n            },\n            {\n                \"default\": \"LR\",\n                \"description\": \"Specify DAG orientation in graph view (LR, TB, RL, BT)\",\n                \"id\": \"orientation\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"str\",\n                \"value\": \"LR\"\n            },\n            {\n                \"default\": \"True\",\n                \"description\": \"Perform scheduler catchup (or only run latest)? Defaults to True\",\n                \"id\": \"catchup\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"bool\",\n                \"value\": \"False\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"A function to be called when a DagRun of this dag fails. A context dictionary is passed as a single parameter to this function.\",\n                \"id\": \"on_failure_callback\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"callable\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"Much like the ``on_failure_callback`` except that it is executed when the dag succeeds.\",\n                \"id\": \"on_success_callback\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"callable\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"Specify optional DAG-level permissions, e.g., \\\"{\\n                            \\\"role1\\\":{\\n                               \\\"can_dag_read\\\"\\n                            },\\n                            \\\"role2\\\":{\\n                               \\\"can_dag_read\\\",\\n                               \\\"can_dag_edit\\\"\\n                            }\\n                         }\\\"\",\n                \"id\": \"access_control\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"dict\"\n            },\n            {\n                \"default\": null,\n                \"description\": \"Specifies if the dag is paused when created for the first time. If the dag exists already, this flag will be ignored. If this optional parameter is not specified, the global config setting will be used.\",\n                \"id\": \"is_paused_upon_creation\",\n                \"inheritedFrom\": null,\n                \"required\": false,\n                \"type\": \"bool\",\n                \"value\": \"False\"\n            }\n        ]\n    },\n    \"nodes\": {\n        \"67d8c1cc-a223-4ffa-9f5c-3978b0d9f6b5\": {\n            \"properties\": {\n                \"description\": \"Execute a Bash script, command or set of commands. .. seealso:: For more information on how to use this operator, take a look at the guide: :ref:`howto/operator:BashOperator` If BaseOperator.do_xcom_push is True, the last line written to stdout will also be pushed to an XCom when the bash command completes\",\n                \"parameters\": [\n                    {\n                        \"id\": \"bash_command\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": true,\n                        \"inheritedFrom\": null,\n                        \"description\": \"The command, set of commands or reference to a bash script (must be '.sh') to be executed. (templated)\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"echo $(date)\"\n                    },\n                    {\n                        \"id\": \"env\",\n                        \"type\": \"Dict[str,str]\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"If env is not None, it must be a dict that defines the environment variables for the new process; these are used instead of inheriting the current process environment, which is the default behavior. (templated)\",\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": [\n                            \"elem\",\n                            \"elem\"\n                        ]\n                    },\n                    {\n                        \"id\": \"output_encoding\",\n                        \"type\": \"str\",\n                        \"default\": \"utf-8\",\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Output encoding of bash command\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"utf-8\"\n                    },\n                    {\n                        \"id\": \"skip_exit_code\",\n                        \"type\": \"int\",\n                        \"default\": 99,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"If task exits with this exit code, leave the task in ``skipped`` state (default: 99). If set to ``None``, any non-zero exit code will be treated as a failure.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"99\"\n                    },\n                    {\n                        \"id\": \"task_id\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": true,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a unique, meaningful id for the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"task_bash\"\n                    },\n                    {\n                        \"id\": \"owner\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the owner of the task, using the unix username is recommended\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"email\",\n                        \"type\": \"Union[str,Iterable[str]]\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the 'to' email address(es) used in email alerts. This can be a single email or multiple ones. Multiple addresses can be specified as a comma or semi-colon separated string or by passing a list of strings.\",\n                        \"typeCategory\": \"union\",\n                        \"typeSubCategories\": [\n                            \"elem\",\n                            \"list\"\n                        ]\n                    },\n                    {\n                        \"id\": \"email_on_retry\",\n                        \"type\": \"bool\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Indicates whether email alerts should be sent when a task is retried\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"email_on_failure\",\n                        \"type\": \"bool\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Indicates whether email alerts should be sent when a task failed\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"retries\",\n                        \"type\": \"int\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the number of retries that should be performed before failing the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"id\": \"retry_delay\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"delay between retries\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"retry_exponential_backoff\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"allow progressive longer waits between retries by using exponential backoff algorithm on retry delay (delay will be converted into seconds)\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"max_retry_delay\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"maximum delay interval between retries\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"start_date\",\n                        \"type\": \"datetime\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"The ``start_date`` for the task, determines the ``execution_date`` for the first task instance. The best practice is to have the start_date rounded to your DAG's ``schedule_interval``. Daily jobs have their start_date some day at 00:00:00, hourly jobs have their start_date at 00:00 of a specific hour. Note that Airflow simply looks at the latest ``execution_date`` and adds the ``schedule_interval`` to determine the next ``execution_date``. It is also very important to note that different tasks' dependencies need to line up in time. If task A depends on task B and their start_date are offset in a way that their execution_date don't line up, A's dependencies will never be met. If you are looking to delay a task, for example running a daily task at 2AM, look into the ``TimeSensor`` and ``TimeDeltaSensor``. We advise against using dynamic ``start_date`` and recommend using fixed ones. Read the FAQ entry about start_date for more information.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"end_date\",\n                        \"type\": \"datetime\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"if specified, the scheduler won't go beyond this date\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"depends_on_past\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"when set to true, task instances will run sequentially and only if the previous instance has succeeded or has been skipped. The task instance for the start_date is allowed to run.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"wait_for_downstream\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"when set to true, an instance of task X will wait for tasks immediately downstream of the previous instance of task X to finish successfully or be skipped before it runs. This is useful if the different instances of a task X alter the same asset, and this asset is used by tasks downstream of task X. Note that depends_on_past is forced to True wherever wait_for_downstream is used. Also note that only tasks *immediately* downstream of the previous task instance are waited for; the statuses of any tasks further downstream are ignored.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"dag\",\n                        \"type\": \"airflow.models.DAG\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a reference to the dag the task is attached to (if any)\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"params\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"default_args\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"priority_weight\",\n                        \"type\": \"int\",\n                        \"default\": 1,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"priority weight of this task against other task. This allows the executor to trigger higher priority tasks before others when things get backed up. Set priority_weight as a higher number for more important tasks.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"1\"\n                    },\n                    {\n                        \"id\": \"weight_rule\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"weighting method used for the effective total priority weight of the task. Options are: ``{ downstream | upstream | absolute }`` default is ``downstream`` When set to ``downstream`` the effective weight of the task is the aggregate sum of all downstream descendants. As a result, upstream tasks will have higher weight and will be scheduled more aggressively when using positive weight values. This is useful when you have multiple dag run instances and desire to have all upstream tasks to complete for all runs before each dag can continue processing downstream tasks. When set to ``upstream`` the effective weight is the aggregate sum of all upstream ancestors. This is the opposite where downstream tasks have higher weight and will be scheduled more aggressively when using positive weight values. This is useful when you have multiple dag run instances and prefer to have each dag complete before starting upstream tasks of other dags. When set to ``absolute``, the effective weight is the exact ``priority_weight`` specified without additional weighting. You may want to do this when you know exactly what priority weight each task should have. Additionally, when set to ``absolute``, there is bonus effect of significantly speeding up the task creation process as for very large DAGS. Options can be set as string or using the constants defined in the static class ``airflow.utils.WeightRule``\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"queue\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"which queue to target when running this job. Not all executors implement queue management, the CeleryExecutor does support targeting specific queues.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"pool\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the slot pool this task should run in, slot pools are a way to limit concurrency for certain tasks\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"pool_slots\",\n                        \"type\": \"int\",\n                        \"default\": 1,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the number of pool slots this task should use (>= 1) Values less than 1 are not allowed.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"1\"\n                    },\n                    {\n                        \"id\": \"sla\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"time by which the job is expected to succeed. Note that this represents the ``timedelta`` after the period is closed. For example if you set an SLA of 1 hour, the scheduler would send an email soon after 1:00AM on the ``2016-01-02`` if the ``2016-01-01`` instance has not succeeded yet. The scheduler pays special attention for jobs with an SLA and sends alert emails for sla misses. SLA misses are also recorded in the database for future reference. All tasks that share the same SLA time get bundled in a single email, sent soon after that time. SLA notification are sent once and only once for each task instance.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"execution_timeout\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"max time allowed for the execution of this task instance, if it goes beyond it will raise and fail.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_execute_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed right before the task is executed.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_failure_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a function to be called when a task instance of this task fails. a context dictionary is passed as a single parameter to this function. Context contains references to related objects to the task instance and is documented under the macros section of the API.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_success_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed when the task succeeds.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_retry_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed when retries occur.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"trigger_rule\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"defines the rule by which dependencies are applied for the task to get triggered. Options are: ``{ all_success | all_failed | all_done | one_success | one_failed | none_failed | none_failed_or_skipped | none_skipped | dummy}`` default is ``all_success``. Options can be set as string or using the constants defined in the static class ``airflow.utils.TriggerRule``\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"resources\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"A map of resource parameter names (the argument names of the Resources constructor) to their values.\",\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"run_as_user\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"unix username to impersonate while running the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"task_concurrency\",\n                        \"type\": \"int\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"When set, a task will be able to limit the concurrent runs across execution_dates\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"id\": \"executor_config\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Additional task-level configuration parameters that are interpreted by a specific executor. Parameters are namespaced by the name of executor. **Example**: to run this task in a specific docker container through the KubernetesExecutor :: MyOperator(..., executor_config={ \\\"KubernetesExecutor\\\": {\\\"image\\\": \\\"myCustomDockerImage\\\"} } )\",\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"do_xcom_push\",\n                        \"type\": \"bool\",\n                        \"default\": true,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"if True, an XCom is pushed containing the Operator's result\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"inlets\",\n                        \"type\": \"Any\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"outlets\",\n                        \"type\": \"Any\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"task_group\",\n                        \"type\": \"'TaskGroup'\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_md\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in Markdown format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_json\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in JSON format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_yaml\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in YAML format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_rst\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in RST format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    }\n                ],\n                \"module\": \"airflow.operators.bash\",\n                \"name\": \"\"\n            },\n            \"type\": \"BashOperator\",\n            \"imagePath\": \"https://svn.apache.org/repos/asf/comdev/project-logos/originals/airflow-3.svg\",\n            \"id\": \"67d8c1cc-a223-4ffa-9f5c-3978b0d9f6b5\",\n            \"loc\": \"-397.5 -222.6875\"\n        },\n        \"1a18ed85-f058-4654-b6e7-4ba9b6ddffc6\": {\n            \"properties\": {\n                \"description\": \"Operator that does literally nothing. It can be used to group tasks in a DAG. The task is evaluated by the scheduler but never processed by the executor.\",\n                \"parameters\": [\n                    {\n                        \"id\": \"task_id\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": true,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a unique, meaningful id for the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"task_dummy\"\n                    },\n                    {\n                        \"id\": \"owner\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the owner of the task, using the unix username is recommended\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"email\",\n                        \"type\": \"Union[str,Iterable[str]]\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the 'to' email address(es) used in email alerts. This can be a single email or multiple ones. Multiple addresses can be specified as a comma or semi-colon separated string or by passing a list of strings.\",\n                        \"typeCategory\": \"union\",\n                        \"typeSubCategories\": [\n                            \"elem\",\n                            \"list\"\n                        ]\n                    },\n                    {\n                        \"id\": \"email_on_retry\",\n                        \"type\": \"bool\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Indicates whether email alerts should be sent when a task is retried\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"email_on_failure\",\n                        \"type\": \"bool\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Indicates whether email alerts should be sent when a task failed\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"retries\",\n                        \"type\": \"int\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the number of retries that should be performed before failing the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"id\": \"retry_delay\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"delay between retries\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"retry_exponential_backoff\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"allow progressive longer waits between retries by using exponential backoff algorithm on retry delay (delay will be converted into seconds)\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"max_retry_delay\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"maximum delay interval between retries\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"start_date\",\n                        \"type\": \"datetime\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"The ``start_date`` for the task, determines the ``execution_date`` for the first task instance. The best practice is to have the start_date rounded to your DAG's ``schedule_interval``. Daily jobs have their start_date some day at 00:00:00, hourly jobs have their start_date at 00:00 of a specific hour. Note that Airflow simply looks at the latest ``execution_date`` and adds the ``schedule_interval`` to determine the next ``execution_date``. It is also very important to note that different tasks' dependencies need to line up in time. If task A depends on task B and their start_date are offset in a way that their execution_date don't line up, A's dependencies will never be met. If you are looking to delay a task, for example running a daily task at 2AM, look into the ``TimeSensor`` and ``TimeDeltaSensor``. We advise against using dynamic ``start_date`` and recommend using fixed ones. Read the FAQ entry about start_date for more information.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"end_date\",\n                        \"type\": \"datetime\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"if specified, the scheduler won't go beyond this date\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"depends_on_past\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"when set to true, task instances will run sequentially and only if the previous instance has succeeded or has been skipped. The task instance for the start_date is allowed to run.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"wait_for_downstream\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"when set to true, an instance of task X will wait for tasks immediately downstream of the previous instance of task X to finish successfully or be skipped before it runs. This is useful if the different instances of a task X alter the same asset, and this asset is used by tasks downstream of task X. Note that depends_on_past is forced to True wherever wait_for_downstream is used. Also note that only tasks *immediately* downstream of the previous task instance are waited for; the statuses of any tasks further downstream are ignored.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"dag\",\n                        \"type\": \"airflow.models.DAG\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a reference to the dag the task is attached to (if any)\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"params\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"default_args\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"priority_weight\",\n                        \"type\": \"int\",\n                        \"default\": 1,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"priority weight of this task against other task. This allows the executor to trigger higher priority tasks before others when things get backed up. Set priority_weight as a higher number for more important tasks.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"1\"\n                    },\n                    {\n                        \"id\": \"weight_rule\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"weighting method used for the effective total priority weight of the task. Options are: ``{ downstream | upstream | absolute }`` default is ``downstream`` When set to ``downstream`` the effective weight of the task is the aggregate sum of all downstream descendants. As a result, upstream tasks will have higher weight and will be scheduled more aggressively when using positive weight values. This is useful when you have multiple dag run instances and desire to have all upstream tasks to complete for all runs before each dag can continue processing downstream tasks. When set to ``upstream`` the effective weight is the aggregate sum of all upstream ancestors. This is the opposite where downstream tasks have higher weight and will be scheduled more aggressively when using positive weight values. This is useful when you have multiple dag run instances and prefer to have each dag complete before starting upstream tasks of other dags. When set to ``absolute``, the effective weight is the exact ``priority_weight`` specified without additional weighting. You may want to do this when you know exactly what priority weight each task should have. Additionally, when set to ``absolute``, there is bonus effect of significantly speeding up the task creation process as for very large DAGS. Options can be set as string or using the constants defined in the static class ``airflow.utils.WeightRule``\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"queue\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"which queue to target when running this job. Not all executors implement queue management, the CeleryExecutor does support targeting specific queues.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"pool\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the slot pool this task should run in, slot pools are a way to limit concurrency for certain tasks\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"pool_slots\",\n                        \"type\": \"int\",\n                        \"default\": 1,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the number of pool slots this task should use (>= 1) Values less than 1 are not allowed.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"1\"\n                    },\n                    {\n                        \"id\": \"sla\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"time by which the job is expected to succeed. Note that this represents the ``timedelta`` after the period is closed. For example if you set an SLA of 1 hour, the scheduler would send an email soon after 1:00AM on the ``2016-01-02`` if the ``2016-01-01`` instance has not succeeded yet. The scheduler pays special attention for jobs with an SLA and sends alert emails for sla misses. SLA misses are also recorded in the database for future reference. All tasks that share the same SLA time get bundled in a single email, sent soon after that time. SLA notification are sent once and only once for each task instance.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"execution_timeout\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"max time allowed for the execution of this task instance, if it goes beyond it will raise and fail.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_execute_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed right before the task is executed.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_failure_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a function to be called when a task instance of this task fails. a context dictionary is passed as a single parameter to this function. Context contains references to related objects to the task instance and is documented under the macros section of the API.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_success_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed when the task succeeds.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_retry_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed when retries occur.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"trigger_rule\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"defines the rule by which dependencies are applied for the task to get triggered. Options are: ``{ all_success | all_failed | all_done | one_success | one_failed | none_failed | none_failed_or_skipped | none_skipped | dummy}`` default is ``all_success``. Options can be set as string or using the constants defined in the static class ``airflow.utils.TriggerRule``\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"resources\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"A map of resource parameter names (the argument names of the Resources constructor) to their values.\",\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"run_as_user\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"unix username to impersonate while running the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"task_concurrency\",\n                        \"type\": \"int\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"When set, a task will be able to limit the concurrent runs across execution_dates\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"id\": \"executor_config\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Additional task-level configuration parameters that are interpreted by a specific executor. Parameters are namespaced by the name of executor. **Example**: to run this task in a specific docker container through the KubernetesExecutor :: MyOperator(..., executor_config={ \\\"KubernetesExecutor\\\": {\\\"image\\\": \\\"myCustomDockerImage\\\"} } )\",\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"do_xcom_push\",\n                        \"type\": \"bool\",\n                        \"default\": true,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"if True, an XCom is pushed containing the Operator's result\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"inlets\",\n                        \"type\": \"Any\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"outlets\",\n                        \"type\": \"Any\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"task_group\",\n                        \"type\": \"'TaskGroup'\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_md\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in Markdown format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_json\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in JSON format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_yaml\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in YAML format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_rst\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in RST format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    }\n                ],\n                \"module\": \"airflow.operators.dummy\",\n                \"name\": \"\"\n            },\n            \"type\": \"DummyOperator\",\n            \"imagePath\": \"https://svn.apache.org/repos/asf/comdev/project-logos/originals/airflow-3.svg\",\n            \"id\": \"1a18ed85-f058-4654-b6e7-4ba9b6ddffc6\",\n            \"loc\": \"-369.5 -16.6875\"\n        },\n        \"9a713f63-482c-4276-828b-f4a57d57834f\": {\n            \"properties\": {\n                \"description\": \"Sends an email.\",\n                \"parameters\": [\n                    {\n                        \"id\": \"to\",\n                        \"type\": \"Union[List[str],str]\",\n                        \"default\": null,\n                        \"required\": true,\n                        \"inheritedFrom\": null,\n                        \"description\": \"list of emails to send the email to. (templated)\",\n                        \"typeCategory\": \"union\",\n                        \"typeSubCategories\": [\n                            \"list\",\n                            \"elem\"\n                        ],\n                        \"value\": \"smartinez@huenei.com\"\n                    },\n                    {\n                        \"id\": \"subject\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": true,\n                        \"inheritedFrom\": null,\n                        \"description\": \"subject line for the email. (templated)\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"Test\"\n                    },\n                    {\n                        \"id\": \"html_content\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": true,\n                        \"inheritedFrom\": null,\n                        \"description\": \"content of the email, html markup is allowed. (templated)\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"<h1>Hi!</h1>\"\n                    },\n                    {\n                        \"id\": \"files\",\n                        \"type\": \"List\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"file names to attach in email (templated)\",\n                        \"typeCategory\": \"list\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"cc\",\n                        \"type\": \"Union[List[str],str]\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"list of recipients to be added in CC field\",\n                        \"typeCategory\": \"union\",\n                        \"typeSubCategories\": [\n                            \"list\",\n                            \"elem\"\n                        ]\n                    },\n                    {\n                        \"id\": \"bcc\",\n                        \"type\": \"Union[List[str],str]\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"list of recipients to be added in BCC field\",\n                        \"typeCategory\": \"union\",\n                        \"typeSubCategories\": [\n                            \"list\",\n                            \"elem\"\n                        ]\n                    },\n                    {\n                        \"id\": \"mime_subtype\",\n                        \"type\": \"str\",\n                        \"default\": \"mixed\",\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"MIME sub content type\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"mixed\"\n                    },\n                    {\n                        \"id\": \"mime_charset\",\n                        \"type\": \"str\",\n                        \"default\": \"utf-8\",\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"character set parameter added to the Content-Type header.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"utf-8\"\n                    },\n                    {\n                        \"id\": \"conn_id\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"task_id\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": true,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a unique, meaningful id for the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"task_email\"\n                    },\n                    {\n                        \"id\": \"owner\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the owner of the task, using the unix username is recommended\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"email\",\n                        \"type\": \"Union[str,Iterable[str]]\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the 'to' email address(es) used in email alerts. This can be a single email or multiple ones. Multiple addresses can be specified as a comma or semi-colon separated string or by passing a list of strings.\",\n                        \"typeCategory\": \"union\",\n                        \"typeSubCategories\": [\n                            \"elem\",\n                            \"list\"\n                        ]\n                    },\n                    {\n                        \"id\": \"email_on_retry\",\n                        \"type\": \"bool\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Indicates whether email alerts should be sent when a task is retried\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"email_on_failure\",\n                        \"type\": \"bool\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Indicates whether email alerts should be sent when a task failed\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"retries\",\n                        \"type\": \"int\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the number of retries that should be performed before failing the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"id\": \"retry_delay\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"delay between retries\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"retry_exponential_backoff\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"allow progressive longer waits between retries by using exponential backoff algorithm on retry delay (delay will be converted into seconds)\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"max_retry_delay\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"maximum delay interval between retries\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"start_date\",\n                        \"type\": \"datetime\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"The ``start_date`` for the task, determines the ``execution_date`` for the first task instance. The best practice is to have the start_date rounded to your DAG's ``schedule_interval``. Daily jobs have their start_date some day at 00:00:00, hourly jobs have their start_date at 00:00 of a specific hour. Note that Airflow simply looks at the latest ``execution_date`` and adds the ``schedule_interval`` to determine the next ``execution_date``. It is also very important to note that different tasks' dependencies need to line up in time. If task A depends on task B and their start_date are offset in a way that their execution_date don't line up, A's dependencies will never be met. If you are looking to delay a task, for example running a daily task at 2AM, look into the ``TimeSensor`` and ``TimeDeltaSensor``. We advise against using dynamic ``start_date`` and recommend using fixed ones. Read the FAQ entry about start_date for more information.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"end_date\",\n                        \"type\": \"datetime\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"if specified, the scheduler won't go beyond this date\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"depends_on_past\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"when set to true, task instances will run sequentially and only if the previous instance has succeeded or has been skipped. The task instance for the start_date is allowed to run.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"wait_for_downstream\",\n                        \"type\": \"bool\",\n                        \"default\": false,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"when set to true, an instance of task X will wait for tasks immediately downstream of the previous instance of task X to finish successfully or be skipped before it runs. This is useful if the different instances of a task X alter the same asset, and this asset is used by tasks downstream of task X. Note that depends_on_past is forced to True wherever wait_for_downstream is used. Also note that only tasks *immediately* downstream of the previous task instance are waited for; the statuses of any tasks further downstream are ignored.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"dag\",\n                        \"type\": \"airflow.models.DAG\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a reference to the dag the task is attached to (if any)\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"params\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"default_args\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"priority_weight\",\n                        \"type\": \"int\",\n                        \"default\": 1,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"priority weight of this task against other task. This allows the executor to trigger higher priority tasks before others when things get backed up. Set priority_weight as a higher number for more important tasks.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"1\"\n                    },\n                    {\n                        \"id\": \"weight_rule\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"weighting method used for the effective total priority weight of the task. Options are: ``{ downstream | upstream | absolute }`` default is ``downstream`` When set to ``downstream`` the effective weight of the task is the aggregate sum of all downstream descendants. As a result, upstream tasks will have higher weight and will be scheduled more aggressively when using positive weight values. This is useful when you have multiple dag run instances and desire to have all upstream tasks to complete for all runs before each dag can continue processing downstream tasks. When set to ``upstream`` the effective weight is the aggregate sum of all upstream ancestors. This is the opposite where downstream tasks have higher weight and will be scheduled more aggressively when using positive weight values. This is useful when you have multiple dag run instances and prefer to have each dag complete before starting upstream tasks of other dags. When set to ``absolute``, the effective weight is the exact ``priority_weight`` specified without additional weighting. You may want to do this when you know exactly what priority weight each task should have. Additionally, when set to ``absolute``, there is bonus effect of significantly speeding up the task creation process as for very large DAGS. Options can be set as string or using the constants defined in the static class ``airflow.utils.WeightRule``\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"queue\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"which queue to target when running this job. Not all executors implement queue management, the CeleryExecutor does support targeting specific queues.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"pool\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the slot pool this task should run in, slot pools are a way to limit concurrency for certain tasks\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"pool_slots\",\n                        \"type\": \"int\",\n                        \"default\": 1,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"the number of pool slots this task should use (>= 1) Values less than 1 are not allowed.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"1\"\n                    },\n                    {\n                        \"id\": \"sla\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"time by which the job is expected to succeed. Note that this represents the ``timedelta`` after the period is closed. For example if you set an SLA of 1 hour, the scheduler would send an email soon after 1:00AM on the ``2016-01-02`` if the ``2016-01-01`` instance has not succeeded yet. The scheduler pays special attention for jobs with an SLA and sends alert emails for sla misses. SLA misses are also recorded in the database for future reference. All tasks that share the same SLA time get bundled in a single email, sent soon after that time. SLA notification are sent once and only once for each task instance.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"execution_timeout\",\n                        \"type\": \"timedelta\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"max time allowed for the execution of this task instance, if it goes beyond it will raise and fail.\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_execute_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed right before the task is executed.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_failure_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"a function to be called when a task instance of this task fails. a context dictionary is passed as a single parameter to this function. Context contains references to related objects to the task instance and is documented under the macros section of the API.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_success_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed when the task succeeds.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"on_retry_callback\",\n                        \"type\": \"TaskStateChangeCallback\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"much like the ``on_failure_callback`` except that it is executed when retries occur.\",\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"trigger_rule\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"defines the rule by which dependencies are applied for the task to get triggered. Options are: ``{ all_success | all_failed | all_done | one_success | one_failed | none_failed | none_failed_or_skipped | none_skipped | dummy}`` default is ``all_success``. Options can be set as string or using the constants defined in the static class ``airflow.utils.TriggerRule``\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"resources\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"A map of resource parameter names (the argument names of the Resources constructor) to their values.\",\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"run_as_user\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"unix username to impersonate while running the task\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"task_concurrency\",\n                        \"type\": \"int\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"When set, a task will be able to limit the concurrent runs across execution_dates\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"null\"\n                    },\n                    {\n                        \"id\": \"executor_config\",\n                        \"type\": \"Dict\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Additional task-level configuration parameters that are interpreted by a specific executor. Parameters are namespaced by the name of executor. **Example**: to run this task in a specific docker container through the KubernetesExecutor :: MyOperator(..., executor_config={ \\\"KubernetesExecutor\\\": {\\\"image\\\": \\\"myCustomDockerImage\\\"} } )\",\n                        \"typeCategory\": \"dict\",\n                        \"typeSubCategories\": []\n                    },\n                    {\n                        \"id\": \"do_xcom_push\",\n                        \"type\": \"bool\",\n                        \"default\": true,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"if True, an XCom is pushed containing the Operator's result\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null,\n                        \"value\": \"False\"\n                    },\n                    {\n                        \"id\": \"inlets\",\n                        \"type\": \"Any\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"outlets\",\n                        \"type\": \"Any\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"task_group\",\n                        \"type\": \"'TaskGroup'\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"typeCategory\": \"complex\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_md\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in Markdown format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_json\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in JSON format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_yaml\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in YAML format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    },\n                    {\n                        \"id\": \"doc_rst\",\n                        \"type\": \"str\",\n                        \"default\": null,\n                        \"required\": false,\n                        \"inheritedFrom\": null,\n                        \"description\": \"Add documentation (in RST format) or notes to your Task objects that is visible in Task Instance details View in the Webserver\",\n                        \"typeCategory\": \"elem\",\n                        \"typeSubCategories\": null\n                    }\n                ],\n                \"module\": \"airflow.operators.email\",\n                \"name\": \"\"\n            },\n            \"type\": \"EmailOperator\",\n            \"imagePath\": \"https://svn.apache.org/repos/asf/comdev/project-logos/originals/airflow-3.svg\",\n            \"id\": \"9a713f63-482c-4276-828b-f4a57d57834f\",\n            \"loc\": \"4.5 -16.6875\"\n        }\n    },\n    \"links\": {\n        \"c501b78a-4432-46e1-ba98-51971cf4b787\": {\n            \"from\": \"67d8c1cc-a223-4ffa-9f5c-3978b0d9f6b5\",\n            \"to\": \"1a18ed85-f058-4654-b6e7-4ba9b6ddffc6\",\n            \"fromPort\": \"Right\",\n            \"toPort\": \"Left\",\n            \"id\": \"c501b78a-4432-46e1-ba98-51971cf4b787\"\n        },\n        \"4176ccbc-eced-4f1b-97b7-aa0e4e1e881a\": {\n            \"from\": \"1a18ed85-f058-4654-b6e7-4ba9b6ddffc6\",\n            \"to\": \"9a713f63-482c-4276-828b-f4a57d57834f\",\n            \"fromPort\": \"Right\",\n            \"toPort\": \"Left\",\n            \"id\": \"4176ccbc-eced-4f1b-97b7-aa0e4e1e881a\"\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8099/dags",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8099",
					"path": [
						"dags"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transformation",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"sourceData\": {\n    \"SexatBirthCode\": \"M\",\n    \"DateOfBirth\": \"05/04/1991\",\n    \"FirstName\": \"Suman\",\n    \"LastName\": \"Santra\",\n    \"City\": \"Folsom\",\n    \"StreetName\": \"2489 Trspv Cir\",\n    \"StateCode\": \"CA\",\n    \"IdentificationDocumentTypeCode\": \"SSN\",\n    \"IdentificationNumber\": \"2543556568\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://ec2-52-52-87-0.us-west-1.compute.amazonaws.com:8203/etl/transformation",
					"protocol": "http",
					"host": [
						"ec2-52-52-87-0",
						"us-west-1",
						"compute",
						"amazonaws",
						"com"
					],
					"port": "8203",
					"path": [
						"etl",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Link and Load",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sourceData\": {\n        \"sourceDataOrganization\": \"\",\n        \"sourceDataName\": \"\",\n        \"sourceDataInputChannel\": \"\",\n        \"sourceDataTypeCode\": \"\",\n        \"sourceDataTrustLevel\": null\n    },\n    \"targetDatabase\": {\n        \"targetDatabaseName\": \"\",\n        \"targetDatabasePhysicalName\": \"\",\n        \"targetDatabaseProductName\": \"\",\n        \"targetDatabaseProductVersion\": \"\",\n        \"targetDatabaseDataFormatType\": \"\"\n    },\n    \"entityGroups\": [\n        {\n            \"targetEntityGroupName\": null,\n            \"targetEntityGroupType\": null,\n            \"entities\": [\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"ChildPerson\",\n                    \"entityPhysicalName\": \"ChildPerson\",\n                    \"entityType\": \"Person\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \" PlaceOfBirth\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"SexatBirthCode\",\n                            \"attributeValue\": \"M\"\n                        },\n                        {\n                            \"attributeName\": \"AmericanIndianDecentIndicator\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DateOfBirth\",\n                            \"attributeValue\": \"05/04/1991\"\n                        },\n                        {\n                            \"attributeName\": \"DateOfDeath\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DataTrustLevel\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"PRIMARY_SUBJECT\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                },\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"Identification\",\n                    \"entityPhysicalName\": \"Identification\",\n                    \"entityType\": \"Identification\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \"IdentificationDocumentTypeCode\",\n                            \"attributeValue\": \"SSN\"\n                        },\n                        {\n                            \"attributeName\": \"IdentificationDocumentName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"IdentificationAuthority\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"IdentificationDescription\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"IdentificationExpirationDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"IdentificationIssueDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"IdentificationIssuingState\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"IdentificationNumber\",\n                            \"attributeValue\": \"2543556568\"\n                        },\n                        {\n                            \"attributeName\": \"IdentificationStatus\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"OtherIdentificationTypeDesc\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"CreateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Status\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"SUBJECT_ATTRIBUTE\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                },\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"Race\",\n                    \"entityPhysicalName\": \"Race\",\n                    \"entityType\": \"Race\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \"RaceCode\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"RaceDesc\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"CreateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Status\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DataTrustLevel\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"SUBJECT_ATTRIBUTE\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                },\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"Ethnicity\",\n                    \"entityPhysicalName\": \"Ethnicity\",\n                    \"entityType\": \"Ethnicity\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \"EthnicityCode\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"EthnicityDesc\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"CreateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Status\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DataTrustLevel\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"SUBJECT_ATTRIBUTE\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                },\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"Gender\",\n                    \"entityPhysicalName\": \"Gender\",\n                    \"entityType\": \"Gender\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \"GenderCode\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"CreateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Status\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DataTrustLevel\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"SUBJECT_ATTRIBUTE\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                },\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"PersonName\",\n                    \"entityPhysicalName\": \"PersonName\",\n                    \"entityType\": \"PersonName\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \"FirstName\",\n                            \"attributeValue\": \"Suman\"\n                        },\n                        {\n                            \"attributeName\": \"LastName\",\n                            \"attributeValue\": \"Santra\"\n                        },\n                        {\n                            \"attributeName\": \"MiddleName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"NamePrefix\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"NameSuffix\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"CreateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Status\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DataTrustLevel\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"SUBJECT_ATTRIBUTE\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                },\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"Role\",\n                    \"entityPhysicalName\": \"Role\",\n                    \"entityType\": \"Role\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \"RoleID\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"RoleTypeCode\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"RoleTypeName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"RoleTypeDescription\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"CreateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Status\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DataTrustLevel\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"SUBJECT_ATTRIBUTE\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                },\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"Address\",\n                    \"entityPhysicalName\": \"Address\",\n                    \"entityType\": \"Address\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \"AddressTypeCode\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"FullAddress\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"CreateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Status\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DataTrustLevel\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"SUBJECT_ATTRIBUTE\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                },\n                {\n                    \"entityId\": 0,\n                    \"entityName\": \"StructuredAddress\",\n                    \"entityPhysicalName\": \"StructuredAddress\",\n                    \"entityType\": \"Address\",\n                    \"entityAttributes\": [\n                        {\n                            \"attributeName\": \"AddressTag\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"City\",\n                            \"attributeValue\": \"Folsom\"\n                        },\n                        {\n                            \"attributeName\": \"County\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"FullAddress\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Latitude\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Longitude\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"StateCode\",\n                            \"attributeValue\": \"CA\"\n                        },\n                        {\n                            \"attributeName\": \"StateName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"StreetName\",\n                            \"attributeValue\": \"2489 Trspv Cir\"\n                        },\n                        {\n                            \"attributeName\": \"StreetNumber\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"UnitNumber\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"ZipCode\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDataSourceName\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"LastUpdateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"CreateDate\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"Status\",\n                            \"attributeValue\": null\n                        },\n                        {\n                            \"attributeName\": \"DataTrustLevel\",\n                            \"attributeValue\": null\n                        }\n                    ],\n                    \"entityClassType\": \"SUBJECT_ATTRIBUTE\",\n                    \"entityLinkAndLoadPolicy\": \"SUB_NOT_FOUND_CRT\"\n                }\n            ]\n        }\n    ],\n    \"associations\": [\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Identification\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Identification\",\n            \"entityAssociationName\": \"HAS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Identification\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Identification\",\n            \"entityAssociationName\": \"HAS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Race\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Race\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Race\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Race\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Ethnicity\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Ethnicity\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Ethnicity\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Ethnicity\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Gender\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Gender\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Gender\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Gender\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"PersonName\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"PersonName\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"PersonName\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"PersonName\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Role\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Role\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Role\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Role\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Address\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Address\",\n            \"entityAssociationName\": \"LIVES_AT\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Address\",\n            \"associationTargetEntityName\": \"StructuredAddress\",\n            \"associationSourceEntityType\": \"Address\",\n            \"associationTargetEntityType\": \"Address\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Address\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Address\",\n            \"entityAssociationName\": \"LIVES_AT\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Address\",\n            \"associationTargetEntityName\": \"StructuredAddress\",\n            \"associationSourceEntityType\": \"Address\",\n            \"associationTargetEntityType\": \"Address\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Address\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Address\",\n            \"entityAssociationName\": \"LIVES_AT\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Address\",\n            \"associationTargetEntityName\": \"StructuredAddress\",\n            \"associationSourceEntityType\": \"Address\",\n            \"associationTargetEntityType\": \"Address\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Person\",\n            \"associationTargetEntityName\": \"Address\",\n            \"associationSourceEntityType\": \"Person\",\n            \"associationTargetEntityType\": \"Address\",\n            \"entityAssociationName\": \"LIVES_AT\",\n            \"associationAttributes\": []\n        },\n        {\n            \"associationSourceEntityId\": 0,\n            \"associationTargetEntityId\": 0,\n            \"associationSourceEntityName\": \"Address\",\n            \"associationTargetEntityName\": \"StructuredAddress\",\n            \"associationSourceEntityType\": \"Address\",\n            \"associationTargetEntityType\": \"Address\",\n            \"entityAssociationName\": \"IS\",\n            \"associationAttributes\": []\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://ec2-52-52-87-0.us-west-1.compute.amazonaws.com:8203/etl/link-load",
					"protocol": "http",
					"host": [
						"ec2-52-52-87-0",
						"us-west-1",
						"compute",
						"amazonaws",
						"com"
					],
					"port": "8203",
					"path": [
						"etl",
						"link-load"
					]
				}
			},
			"response": []
		}
	]
}